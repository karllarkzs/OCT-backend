// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PharmaBack.Data;

#nullable disable

namespace PharmaBack.Migrations
{
    [DbContext(typeof(PharmaDbContext))]
    partial class PharmaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PharmaBack.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("PharmaBack.Models.Bundle", b =>
                {
                    b.Property<Guid>("BundleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BundleId");

                    b.ToTable("Bundles");
                });

            modelBuilder.Entity("PharmaBack.Models.BundleItem", b =>
                {
                    b.Property<Guid>("BundleItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("BundleItemId");

                    b.HasIndex("BundleId");

                    b.HasIndex("ProductId");

                    b.ToTable("BundleItems");
                });

            modelBuilder.Entity("PharmaBack.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PharmaBack.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("PharmaBack.Models.ConsumableExtension", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("UsesLeft")
                        .HasColumnType("integer");

                    b.Property<int>("UsesMax")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.ToTable("ConsumableExtensions");
                });

            modelBuilder.Entity("PharmaBack.Models.Formulation", b =>
                {
                    b.Property<Guid>("FormulationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FormulationId");

                    b.ToTable("Formulations");
                });

            modelBuilder.Entity("PharmaBack.Models.InventoryBatch", b =>
                {
                    b.Property<Guid>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("integer");

                    b.Property<string>("StorageLocation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BatchId");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryBatches");
                });

            modelBuilder.Entity("PharmaBack.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FormulationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Generic")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("HasExpiry")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FormulationId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PharmaBack.Models.BundleItem", b =>
                {
                    b.HasOne("PharmaBack.Models.Bundle", "Bundle")
                        .WithMany("BundleItems")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmaBack.Models.Product", "Product")
                        .WithMany("BundleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PharmaBack.Models.ConsumableExtension", b =>
                {
                    b.HasOne("PharmaBack.Models.Product", "Product")
                        .WithOne("Consumable")
                        .HasForeignKey("PharmaBack.Models.ConsumableExtension", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PharmaBack.Models.InventoryBatch", b =>
                {
                    b.HasOne("PharmaBack.Models.Product", "Product")
                        .WithMany("Batches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PharmaBack.Models.Product", b =>
                {
                    b.HasOne("PharmaBack.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("PharmaBack.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("PharmaBack.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId");

                    b.HasOne("PharmaBack.Models.Formulation", "Formulation")
                        .WithMany("Products")
                        .HasForeignKey("FormulationId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Formulation");
                });

            modelBuilder.Entity("PharmaBack.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PharmaBack.Models.Bundle", b =>
                {
                    b.Navigation("BundleItems");
                });

            modelBuilder.Entity("PharmaBack.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PharmaBack.Models.Company", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PharmaBack.Models.Formulation", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PharmaBack.Models.Product", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("BundleItems");

                    b.Navigation("Consumable");
                });
#pragma warning restore 612, 618
        }
    }
}
